type AdminUser {
  firstname: String!
  id: ID!
  lastname: String!
  username: String
}

type ComponentBlokBestiary {
  Image: UploadFile
  Name: String
  _id: ID!
  id: ID!
}

input ComponentBlokBestiaryInput {
  Image: ID
  Name: String
}

type ComponentBlokContent {
  Description: String
  Image(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
  Link: String
  Title: String
  _id: ID!
  id: ID!
}

input ComponentBlokContentInput {
  Description: String
  Image: [ID]
  Link: String
  Title: String
}

type Creature {
  _id: ID!
  createdAt: DateTime!
  description: String
  effects(limit: Int, sort: String, start: Int, where: JSON): [Effect]
  icon: UploadFile
  id: ID!
  name: String!
  published_at: DateTime
  updatedAt: DateTime!
}

type CreatureAggregator {
  count: Int
  totalCount: Int
}

type CreatureConnection {
  aggregate: CreatureAggregator
  groupBy: CreatureGroupBy
  values: [Creature]
}

type CreatureConnectionCreatedAt {
  connection: CreatureConnection
  key: DateTime
}

type CreatureConnectionDescription {
  connection: CreatureConnection
  key: String
}

type CreatureConnectionIcon {
  connection: CreatureConnection
  key: ID
}

type CreatureConnectionId {
  connection: CreatureConnection
  key: ID
}

type CreatureConnectionName {
  connection: CreatureConnection
  key: String
}

type CreatureConnectionPublished_at {
  connection: CreatureConnection
  key: DateTime
}

type CreatureConnectionUpdatedAt {
  connection: CreatureConnection
  key: DateTime
}

type CreatureConnection_id {
  connection: CreatureConnection
  key: ID
}

type CreatureGroupBy {
  _id: [CreatureConnection_id]
  createdAt: [CreatureConnectionCreatedAt]
  description: [CreatureConnectionDescription]
  icon: [CreatureConnectionIcon]
  id: [CreatureConnectionId]
  name: [CreatureConnectionName]
  published_at: [CreatureConnectionPublished_at]
  updatedAt: [CreatureConnectionUpdatedAt]
}

input CreatureInput {
  created_by: ID
  description: String
  effects: [ID]
  icon: ID
  name: String!
  published_at: DateTime
  updated_by: ID
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Effect {
  _id: ID!
  createdAt: DateTime!
  creatures(limit: Int, sort: String, start: Int, where: JSON): [Creature]
  effect: Effect
  id: ID!
  image: UploadFile
  name: String!
  pair: Effect
  published_at: DateTime
  updatedAt: DateTime!
}

type EffectAggregator {
  count: Int
  totalCount: Int
}

type EffectConnection {
  aggregate: EffectAggregator
  groupBy: EffectGroupBy
  values: [Effect]
}

type EffectConnectionCreatedAt {
  connection: EffectConnection
  key: DateTime
}

type EffectConnectionEffect {
  connection: EffectConnection
  key: ID
}

type EffectConnectionId {
  connection: EffectConnection
  key: ID
}

type EffectConnectionImage {
  connection: EffectConnection
  key: ID
}

type EffectConnectionName {
  connection: EffectConnection
  key: String
}

type EffectConnectionPair {
  connection: EffectConnection
  key: ID
}

type EffectConnectionPublished_at {
  connection: EffectConnection
  key: DateTime
}

type EffectConnectionUpdatedAt {
  connection: EffectConnection
  key: DateTime
}

type EffectConnection_id {
  connection: EffectConnection
  key: ID
}

type EffectGroupBy {
  _id: [EffectConnection_id]
  createdAt: [EffectConnectionCreatedAt]
  effect: [EffectConnectionEffect]
  id: [EffectConnectionId]
  image: [EffectConnectionImage]
  name: [EffectConnectionName]
  pair: [EffectConnectionPair]
  published_at: [EffectConnectionPublished_at]
  updatedAt: [EffectConnectionUpdatedAt]
}

input EffectInput {
  created_by: ID
  creatures: [ID]
  effect: ID
  image: ID
  name: String!
  pair: ID
  published_at: DateTime
  updated_by: ID
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

type I18NLocale {
  _id: ID!
  code: String
  createdAt: DateTime!
  id: ID!
  name: String
  updatedAt: DateTime!
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LocaleInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = ComponentBlokBestiary | ComponentBlokContent | Creature | CreatureAggregator | CreatureConnection | CreatureConnectionCreatedAt | CreatureConnectionDescription | CreatureConnectionIcon | CreatureConnectionId | CreatureConnectionName | CreatureConnectionPublished_at | CreatureConnectionUpdatedAt | CreatureConnection_id | CreatureGroupBy | Effect | EffectAggregator | EffectConnection | EffectConnectionCreatedAt | EffectConnectionEffect | EffectConnectionId | EffectConnectionImage | EffectConnectionName | EffectConnectionPair | EffectConnectionPublished_at | EffectConnectionUpdatedAt | EffectConnection_id | EffectGroupBy | I18NLocale | Page | PageAggregator | PageConnection | PageConnectionCreatedAt | PageConnectionId | PageConnectionInMenu | PageConnectionLink | PageConnectionName | PageConnectionPublished_at | PageConnectionUpdatedAt | PageConnection_id | PageGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createCreaturePayload | createEffectPayload | createPagePayload | createRolePayload | createUserPayload | deleteCreaturePayload | deleteEffectPayload | deleteFilePayload | deletePagePayload | deleteRolePayload | deleteUserPayload | updateCreaturePayload | updateEffectPayload | updatePagePayload | updateRolePayload | updateUserPayload

type Mutation {
  createCreature(input: createCreatureInput): createCreaturePayload
  createEffect(input: createEffectInput): createEffectPayload
  createPage(input: createPageInput): createPagePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  deleteCreature(input: deleteCreatureInput): deleteCreaturePayload
  deleteEffect(input: deleteEffectInput): deleteEffectPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  deletePage(input: deletePageInput): deletePagePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCreature(input: updateCreatureInput): updateCreaturePayload
  updateEffect(input: updateEffectInput): updateEffectPayload
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  updatePage(input: updatePageInput): updatePagePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Page {
  _id: ID!
  content: [PageContentDynamicZone]
  createdAt: DateTime!
  id: ID!
  inMenu: Boolean
  link: String
  name: String!
  published_at: DateTime
  updatedAt: DateTime!
}

type PageAggregator {
  count: Int
  totalCount: Int
}

type PageConnection {
  aggregate: PageAggregator
  groupBy: PageGroupBy
  values: [Page]
}

type PageConnectionCreatedAt {
  connection: PageConnection
  key: DateTime
}

type PageConnectionId {
  connection: PageConnection
  key: ID
}

type PageConnectionInMenu {
  connection: PageConnection
  key: Boolean
}

type PageConnectionLink {
  connection: PageConnection
  key: String
}

type PageConnectionName {
  connection: PageConnection
  key: String
}

type PageConnectionPublished_at {
  connection: PageConnection
  key: DateTime
}

type PageConnectionUpdatedAt {
  connection: PageConnection
  key: DateTime
}

type PageConnection_id {
  connection: PageConnection
  key: ID
}

union PageContentDynamicZone = ComponentBlokBestiary | ComponentBlokContent

"""Input type for dynamic zone content of Page"""
scalar PageContentDynamicZoneInput

type PageGroupBy {
  _id: [PageConnection_id]
  createdAt: [PageConnectionCreatedAt]
  id: [PageConnectionId]
  inMenu: [PageConnectionInMenu]
  link: [PageConnectionLink]
  name: [PageConnectionName]
  published_at: [PageConnectionPublished_at]
  updatedAt: [PageConnectionUpdatedAt]
}

input PageInput {
  content: [PageContentDynamicZoneInput!]
  created_by: ID
  inMenu: Boolean
  link: String
  name: String!
  published_at: DateTime
  updated_by: ID
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  creature(id: ID!, publicationState: PublicationState): Creature
  creatures(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Creature]
  creaturesConnection(limit: Int, sort: String, start: Int, where: JSON): CreatureConnection
  effect(id: ID!, publicationState: PublicationState): Effect
  effects(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Effect]
  effectsConnection(limit: Int, sort: String, start: Int, where: JSON): EffectConnection
  files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  me: UsersPermissionsMe
  page(id: ID!, publicationState: PublicationState): Page
  pages(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Page]
  pagesConnection(limit: Int, sort: String, start: Int, where: JSON): PageConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

input UserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  _id: ID!
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime!
  email: String!
  id: ID!
  provider: String
  role: UsersPermissionsRole
  updatedAt: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
}

input createCreatureInput {
  data: CreatureInput
}

type createCreaturePayload {
  creature: Creature
}

input createEffectInput {
  data: EffectInput
}

type createEffectPayload {
  effect: Effect
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input deleteCreatureInput {
  where: InputID
}

type deleteCreaturePayload {
  creature: Creature
}

input deleteEffectInput {
  where: InputID
}

type deleteEffectPayload {
  effect: Effect
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editComponentBlokBestiaryInput {
  Image: ID
  Name: String
  id: ID
}

input editComponentBlokContentInput {
  Description: String
  Image: [ID]
  Link: String
  Title: String
  id: ID
}

input editCreatureInput {
  created_by: ID
  description: String
  effects: [ID]
  icon: ID
  name: String
  published_at: DateTime
  updated_by: ID
}

input editEffectInput {
  created_by: ID
  creatures: [ID]
  effect: ID
  image: ID
  name: String
  pair: ID
  published_at: DateTime
  updated_by: ID
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editLocaleInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

input editPageInput {
  content: [PageContentDynamicZoneInput!]
  created_by: ID
  inMenu: Boolean
  link: String
  name: String
  published_at: DateTime
  updated_by: ID
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String
}

input updateCreatureInput {
  data: editCreatureInput
  where: InputID
}

type updateCreaturePayload {
  creature: Creature
}

input updateEffectInput {
  data: editEffectInput
  where: InputID
}

type updateEffectPayload {
  effect: Effect
}

input updatePageInput {
  data: editPageInput
  where: InputID
}

type updatePagePayload {
  page: Page
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  data: editUserInput
  where: InputID
}

type updateUserPayload {
  user: UsersPermissionsUser
}
